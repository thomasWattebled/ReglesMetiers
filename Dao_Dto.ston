OrderedCollection[MiNoteBookCodeCellModel{#text:'dto := ClassDTO new.\rlistDTO:= dto findDTO: mooseModel allModelClasses.\rdao := ClassDAO new.\rlistDAO:= dao findDao:  mooseModel allModelClasses.\rdictionnaire:= Dictionary new.\rmyPrinter:= MiReportCollectionPrinter new.'},MiNoteBookTextCellModel{#text:'# Analyse DTO / DAO\r## DAO '},MiNoteBookCodeCellModel{#text:'stream <<  (\'nombre de DAO = \' , listDAO size asString ).'},MiNoteBookCodeCellModel{#text:'printer printMooseName: listDAO '},MiNoteBookTextCellModel{#text:'## DTO'},MiNoteBookCodeCellModel{#text:'stream << (\'nombre de DTO = \' , listDTO size asString  ).'},MiNoteBookCodeCellModel{#text:'printer printMooseName: listDTO.'},MiNoteBookTextCellModel{#text:'## Commun entre DTO et DAO'},MiNoteBookCodeCellModel{#text:'finalList:= (listWithoutDTO intersection: listWithourDAO).'},MiNoteBookCodeCellModel{#text:'stream << (\'Nombre de nom commun entre Dao et Dto est de \' , finalList size asString).'},MiNoteBookCodeCellModel{#text:'listWithoutDTO:= dto deleteDTOAndGWTInName: listDTO.\rlistWithourDAO:= dao deleteDAOInName: listDAO.\rprinter printMooseName: finalList.'},MiNoteBookTextCellModel{#text:'## Dao utilisant directement des DTO'},MiNoteBookCodeCellModel{#text:'dictionnaire:= dao dao:listDAO  using: listDTO.\rstream << (\'Le nombre de Dao qui utilise des Dto est de : \' , dictionnaire size asString).'},MiNoteBookCodeCellModel{#text:'printer printMooseName: dictionnaire  associations '},MiNoteBookTextCellModel{#text:'## Build Query\r\rNous avions remarqué que nous retrouvions plusieurs fois une méthode  **build Query ** dans nos Class Dao alors voici toutes les classes qui ont un buildQuery'},MiNoteBookCodeCellModel{#text:'printer printMooseName: (dao findClassImplementing: \'buildQuery\' in: listDAO ).'},MiNoteBookTextCellModel{#text:'La méthode buildQuery permet de recuperer des informations de la base de donnée. On retrouve notamment getSession().createQuery().\rAprès avoir regardé dans des classes qui n\'ont pas de buildQuery. On retrouve dans leur méthode un appel à getSession().'},MiNoteBookCodeCellModel{#text:'listDaoUsingGetSession:=dao  dao: listDAO  invokeMethod: \'getSession\'.\rstream << (\'Le nombre de classe qui utilise getSession est de: \', listDaoUsingGetSession size asString , \'. Il y a uniquement \', (listDAO size - listDaoUsingGetSession size)asString , \' qui n utilise pas getSession.\r\').\rprinter printMooseName: (listDAO difference: listDaoUsingGetSession )'},MiNoteBookTextCellModel{#text:'Quand on regarde en detail  ces classes ont remarqué que DaoAdresse et DaoGroupeUtilisateurs sont vides. DaoUtilisateur a une seule méthode \rOverride et renvoie null.\rRegardons maintenant quelle methode n\'utilise ni getSession ni buildQuery.'},MiNoteBookCodeCellModel{#text:'printer printMooseName: (dao dao: listDAO  notInvokeMethod: \'getSession\'  or:  \'buildQuery\')associations. '},MiNoteBookTextCellModel{#text:'## Les appels des Dao.\rLes Dao ne sont pas appelés directement dans d\'autre classes. En effet chaque Dao implémente sa propre interface (exemple DaoClient implémente IDaoClient). Ce sont les interfaces qui sont ensuite appelés dans les autres classes.\rLes Dao sont des attributs dans les services.  \rLes dao sont utilisés dans les classes Service... mais non les DTO.\r\rRegardons alors où sont utilisés les Services...\r\rVoici un Exemple dans quelle classe est utilisé e ServiceClient'},MiNoteBookCodeCellModel{#text:'allService:= (dao findAllService: listDAO)asSet difference: listDAO . '},MiNoteBookTextCellModel{#text:'## Service '},MiNoteBookCodeCellModel{#text:'stream << (\'le nombre total de Service est de :\' ,  allService size asString ). \rprinter printMooseName: allService asArray '},MiNoteBookTextCellModel{#text:''},MiNoteBookTextCellModel{#text:'service := Service new.\rmyService := service findIN: mooseModel service: \'ServiceClient\'.\rprinter printMooseName: (service getTypeEntitiesOFIService: myService) asArray'},MiNoteBookTextCellModel{#text:''}]