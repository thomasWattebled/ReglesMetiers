OrderedCollection[MiNoteBookCodeCellModel{#text:'mooseModel.\ranalyser := Analyser new. '},MiNoteBookTextCellModel{#text:'##Regles Metiers GF-EVOL\r# Dao\rRecherche d\'un Dao\rPour rechercher une class Dao, j\'ai commencé par parcourir les différentes classes jusqu\'à trouver une clsse avec \'Dao\' dans son nom. Une fois que j\'en ai trouvé plusieurs dans le modèle (AchatDAO, DaoTechnique, UcPublicationTransfertBudgetDAO...).\rEn Essayant de trouver un point commun à ces différentes classes, si on regarde les supperclass, on arrive pour ces 3 classes à un moment à DaoAbstract.\r\rDaoAbstract peut être considerer comme un point de départ pour trouver les classes Dao.'},MiNoteBookCodeCellModel{#text:'daoabstract:= analyser find: \'DaoAbstract\' in:mooseModel .\rsubdaoAbstract := analyser getClassAndSubclassNames: {daoabstract}. \rstream << (\'Le nombre de sous classe de DaoAbstract est de :\', subdaoAbstract size asString , \'\r\').\rprinter printMooseName: subdaoAbstract.'},MiNoteBookTextCellModel{#text:'Regardons parmis ces différentes classes si on retrouve des ParameterizableClass.'},MiNoteBookCodeCellModel{#text:'param:= analyser findparameterizableClass: subdaoAbstract.\rprinter printMooseName: param.'},MiNoteBookTextCellModel{#text:'Il faut donc regarder maintenant les sous classes des Regardons parmis ces différentes classes si on retrouve des ParameterizableClass.\r\r'},MiNoteBookCodeCellModel{#text:'subparam:= analyser getSubClassOfListParameterizableClass: param.\rprinter printMooseName: subparam'},MiNoteBookCodeCellModel{#text:'subdaoAbstract addAll: subparam.\rstream << (\'nombre de Dao est maintenant de :\', subdaoAbstract size asString,\'\r\')'},MiNoteBookTextCellModel{#text:'Les Dao pour se connecter avec la base de donnée utilise la methode getConnection. Voici la liste des Dao Classes qui n\'utilise pas getConnection().'},MiNoteBookCodeCellModel{#text:'useGetConnextion:= analyser dao: subdaoAbstract  invokeMethod:\'getConnexion\'.\rprinter printMooseName: (subdaoAbstract difference: useGetConnextion )'},MiNoteBookTextCellModel{#text:'la classe Sgbd est une classe abstraite vite.\rLes classes BudgetDAOOracle et BudgetDAOSQLServer ont une unique méthode : "fournirRequetePourLoadIdElementAnalytiqueAvecCodeLePlusGrandSurAxe"'},MiNoteBookTextCellModel{#text:'# DTO\rPour trouver les Dto cela marche différement du projet Omaje en effet les Dto ne descende pas de BLLazyServerPojo ou de BLLazyPojo.\rJ\'ai alors essayer de trouver des noms de classes qui pourrait me faire penser à un dto (Achat, Client , Entreprise etc..) ou quand il y a DTO dans le nom.\rAprès en avoir regarder plusieurs ils ont tous une superclasse en commun : EntityAbstract.'},MiNoteBookCodeCellModel{#text:'entiteAbstract:= analyser find: \'EntiteAbstract\' in:mooseModel .\rsubentiteAbstract := analyser getClassAndSubclassNames: {entiteAbstract}. \rstream << (\'Le nombre de sous classe de DaoAbstract est de :\', subentiteAbstract size asString , \'\r\').'},MiNoteBookTextCellModel{#text:'Une fois les Dao et Dto récupérés, regardons où sont utilisés les Dao.'},MiNoteBookCodeCellModel{#text:'useDao:= (subdaoAbstract flatCollect: [ :c | c queryAllIncoming withoutSelfLoops  atScope: FamixJavaClass ]) asSet.\rstream << (useDao size asString,\'\r\') .\rprinter printMooseName: (useDao asArray ).'},MiNoteBookTextCellModel{#text:'On remarque que beaucoup des classes sont des tests.\rle nombre de service est de:456'},MiNoteBookCodeCellModel{#text:'useDao := useDao reject: [ :classe | classe name asLowercase includesSubstring: \'test\' ].\rprinter printMooseName: ( (useDao difference: subdaoAbstract )asArray)'},MiNoteBookTextCellModel{#text:'On remarque que ces services sont une sous classe de la classe : ServiceAbstract.\rregardons si toutes les sous classes de ServiceAbstract utilise les Dao.'},MiNoteBookCodeCellModel{#text:'serviceAbstract:= analyser find: \'ServiceAbstract\' in:mooseModel .\rsubserviceAbstract := analyser getClassAndSubclassNames: {serviceAbstract}. \rstream << (\'Le nombre de sous classe de ServiceAbstract est de :\', subserviceAbstract size asString , \'\rVoici tous services qui n utilise pas de dao: \r\').\rprinter printMooseName: (subserviceAbstract difference: useDao ) '},MiNoteBookTextCellModel{#text:'# Uc\rA partir des classes qui utilise les Dao soit les services, je recupere les classes qui utilise ces services.'},MiNoteBookCodeCellModel{#text:'uc := analyser getTypeEntitiesofList: useDao.\ruc:=uc reject: [ :classe | classe name asLowercase includesSubstring: \'test\' ].\rprinter printMooseName: (uc difference: useDao)asArray.\r'}]